include 'ragel.lm'
include 'host.lm'

lex
	token selectt /''/
	{
		input->push( make_token( typeid<c_select_section>, '' ) )
	}

	token c_select_section //
end

def start
	[c_select_section SectionList: host::section*]

def import_val
	[host::number] :Number
|	[host::string] :String

def import
	[Name: host::ident Val: import_val] :Import

export RagelTree: start
export RagelError: str
export RagelImport: import*

A: list_el<str>

# File name. The open is expected to succeed. It is tested before the colm
# program is called.
A = argv->pop_head_el()
FileName: str = A->value

# Import
A = argv->pop_head_el()
GblImport = atoi( A->value ) != 0

# IncludeDepth
A = argv->pop_head_el()
GblIncludeDepth = atoi( A->value )

# TargetMachine
A = argv->pop_head_el()
GblTargetMachine = A->value

# SearchMachine
A = argv->pop_head_el()
GblSearchMachine = A->value

Stream: stream = open( FileName, "r" )
reduce TopLevel start[ Stream ]
RagelError = error

include 'reducer.lm'
